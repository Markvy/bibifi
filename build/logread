#!/usr/bin/python
from sys import argv
from hmac import HMAC
from hashlib import md5
from collections import defaultdict
from Crypto.Cipher.AES import AESCipher, MODE_CFB

assert argv[1] == '-K'
token = argv[2]
key = md5(token).digest()
log = argv[-1]
assert log.isalnum()
f = open(log)
mac = f.readline().strip()
assert HMAC(token, f.read()).hexdigest() == mac

on_site = {'-E':[], '-G':[]}
rooms = defaultdict(list)
folks = defaultdict(list)
timer = defaultdict(lambda: [None,0])

f = open(log)
f.next()
for line in f:
	timestamp, al, eg, room_id, name = line.split()
	iv = md5(log+'-'+timestamp).digest()
	cipher = AESCipher(key, MODE_CFB, iv)
	al, eg, room_id, name = [cipher.decrypt(x.decode('hex')) for x in al, eg, room_id, name]
	timestamp = int(timestamp)
	no_room = room_id=='-'
	group = on_site[eg]
	if al == '-A':
		if no_room:
			group += [name]
			timer[name][0] = timestamp
		else:
			rooms[room_id] += [name]
			folks[name] += [room_id]
	else:
		if no_room:
			group.remove(name)
			t = timer[name]
			t[1] += timestamp - t[0]
			t[0] = None
		else: rooms[room_id].remove(name)

def csv(L): return ','.join(sorted(L))

assert argv[3] in ('-S','-R','-I','-T')
if argv[3] == '-S':
	print csv(on_site['-E'])
	print csv(on_site['-G'])
	for room_id in sorted(rooms, key=int):
		if len(rooms[room_id]) > 0:
			print room_id+':', csv(rooms[room_id])
elif argv[3] == '-R':
	assert argv[4] in ('-E','-G')
	print ','.join(folks[argv[5]])
elif argv[3] == '-I':
	print csv(set.intersection(*(set(folks[name]) for name in argv[5:-1:2])))
elif argv[3] == '-T':
	assert argv[4] in ('-E','-G')
	print timer[argv[5]][1]
else: assert False
